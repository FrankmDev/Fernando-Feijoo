---
interface Props {
  title: string;
  subtitle?: string;
  class?: string;
  id?: string;
  level?: 1 | 2 | 3 | 4 | 5 | 6;
  align?: "left" | "center" | "right";
  size?: "sm" | "md" | "lg" | "xl";
}

const {
  title,
  subtitle,
  class: className = "",
  id,
  level = 2,
  align = "left",
  size = "lg",
} = Astro.props;

// Generate heading tag based on level
const HeadingTag = `h${level}` as keyof HTMLElementTagNameMap;

// Size classes
const sizeClasses = {
  sm: "text-lg sm:text-xl md:text-2xl",
  md: "text-xl sm:text-2xl md:text-3xl",
  lg: "text-2xl sm:text-3xl md:text-5xl",
  xl: "text-3xl sm:text-4xl md:text-6xl",
};

// Alignment classes
const alignClasses = {
  left: "text-left",
  center: "text-center",
  right: "text-right",
};

// Combine classes
const headingClasses = [
  "font-bold tracking-tight text-zinc-900 mb-6",
  sizeClasses[size],
  alignClasses[align],
  className,
]
  .filter(Boolean)
  .join(" ");
---

<header class={alignClasses[align]}>
  <HeadingTag class={headingClasses} {id}>
    <slot>{title}</slot>
  </HeadingTag>

  {
    subtitle && (
      <p
        class={`text-base md:text-lg text-gray-600 mt-2 max-w-3xl ${align === "center" ? "mx-auto" : ""}`}
      >
        {subtitle}
      </p>
    )
  }
</header>

<style>
  /* Ensure proper text wrapping */
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    text-wrap: balance;
    line-height: 1.1;
  }

  p {
    text-wrap: pretty;
    line-height: 1.6;
  }

  /* Responsive font scaling */
  @media (max-width: 480px) {
    .font-bold {
      line-height: 1.2;
    }
  }

  /* High contrast support */
  @media (prefers-contrast: high) {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      color: #000;
      font-weight: 900;
    }
  }

  /* Print styles */
  @media print {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      break-after: avoid;
      color: #000 !important;
    }

    p {
      color: #333 !important;
    }
  }
</style>
