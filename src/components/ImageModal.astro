---
export interface Props {
  id?: string;
}

const { id = "imageModal" } = Astro.props;
---

<div
  id={id}
  class="image-modal hidden fixed inset-0 z-50 bg-black bg-opacity-90 flex items-center justify-center p-4"
>
  <div class="relative max-w-full max-h-full flex items-center justify-center">
    <!-- Close button -->
    <button
      class="modal-close absolute top-4 right-4 text-white hover:text-gray-300 transition-colors z-10"
      aria-label="Close modal"
    >
      <svg
        class="w-8 h-8"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Navigation buttons -->
    <button
      class="modal-prev absolute left-4 top-1/2 -translate-y-1/2 text-white hover:text-gray-300 transition-colors p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-70"
      aria-label="Previous image"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>

    <button
      class="modal-next absolute right-4 top-1/2 -translate-y-1/2 text-white hover:text-gray-300 transition-colors p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-70"
      aria-label="Next image"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5l7 7-7 7"></path>
      </svg>
    </button>

    <!-- Image container -->
    <div
      class="modal-image-container flex items-center justify-center max-w-full max-h-full"
    >
      <!-- Loading indicator -->
      <div
        class="modal-loading absolute inset-0 flex items-center justify-center bg-black bg-opacity-20"
      >
        <div
          class="animate-spin rounded-full h-12 w-12 border-b-2 border-white"
        >
        </div>
      </div>

      <img
        class="modal-image max-w-full max-h-full object-contain opacity-0 transition-opacity duration-300"
        src=""
        alt=""
        style="max-height: 90vh; max-width: 90vw;"
      />
    </div>

    <!-- Image counter -->
    <div
      class="absolute bottom-4 left-1/2 -translate-x-1/2 text-white bg-black bg-opacity-50 px-3 py-1 rounded-full text-sm"
    >
      <span class="modal-current">1</span> / <span class="modal-total">1</span>
    </div>
  </div>
</div>

<script>
  class ImageModal {
    private modal: HTMLElement;
    private modalImage!: HTMLImageElement;
    private modalCurrent!: HTMLElement;
    private modalTotal!: HTMLElement;
    private closeBtn!: HTMLElement;
    private prevBtn!: HTMLElement;
    private nextBtn!: HTMLElement;
    private images: string[] = [];
    private currentIndex: number = 0;

    constructor(modalId: string = "imageModal") {
      this.modal = document.getElementById(modalId) as HTMLElement;
      if (!this.modal) return;

      this.modalImage = this.modal.querySelector(
        ".modal-image",
      ) as HTMLImageElement;
      this.modalCurrent = this.modal.querySelector(
        ".modal-current",
      ) as HTMLElement;
      this.modalTotal = this.modal.querySelector(".modal-total") as HTMLElement;
      this.closeBtn = this.modal.querySelector(".modal-close") as HTMLElement;
      this.prevBtn = this.modal.querySelector(".modal-prev") as HTMLElement;
      this.nextBtn = this.modal.querySelector(".modal-next") as HTMLElement;

      this.bindEvents();
      this.setupImageEvents();
    }

    private bindEvents() {
      // Close modal events
      this.closeBtn?.addEventListener("click", () => this.closeModal());
      this.modal?.addEventListener("click", (e) => {
        if (e.target === this.modal) this.closeModal();
      });

      // Navigation events
      this.prevBtn?.addEventListener("click", () => this.showPreviousImage());
      this.nextBtn?.addEventListener("click", () => this.showNextImage());

      // Keyboard events
      document.addEventListener("keydown", (e) => {
        if (!this.modal.classList.contains("hidden")) {
          switch (e.key) {
            case "Escape":
              this.closeModal();
              break;
            case "ArrowLeft":
              this.showPreviousImage();
              break;
            case "ArrowRight":
              this.showNextImage();
              break;
          }
        }
      });
    }

    private setupImageEvents() {
      if (this.modalImage) {
        this.modalImage.addEventListener("load", () => {
          this.hideLoading();
          this.modalImage.style.opacity = "1";
        });

        this.modalImage.addEventListener("error", () => {
          this.hideLoading();
          this.modalImage.style.opacity = "1";
        });
      }
    }

    private showLoading() {
      const loading = this.modal.querySelector(".modal-loading") as HTMLElement;
      if (loading) loading.style.display = "flex";
      this.modalImage.style.opacity = "0";
    }

    private hideLoading() {
      const loading = this.modal.querySelector(".modal-loading") as HTMLElement;
      if (loading) loading.style.display = "none";
    }

    public openModal(images: string[], startIndex: number = 0) {
      this.images = images;
      this.currentIndex = startIndex;

      if (this.images.length === 0) return;

      // Update total count
      if (this.modalTotal) {
        this.modalTotal.textContent = this.images.length.toString();
      }

      // Show/hide navigation buttons based on number of images
      const showNavigation = this.images.length > 1;
      if (this.prevBtn)
        this.prevBtn.style.display = showNavigation ? "block" : "none";
      if (this.nextBtn)
        this.nextBtn.style.display = showNavigation ? "block" : "none";

      this.showCurrentImage();
      this.modal.classList.remove("hidden");
      document.body.style.overflow = "hidden";
    }

    private showCurrentImage() {
      if (this.currentIndex < 0 || this.currentIndex >= this.images.length)
        return;

      this.showLoading();

      const imageSrc = this.images[this.currentIndex];
      this.modalImage.src = imageSrc;
      this.modalImage.alt = `Image ${this.currentIndex + 1} of ${this.images.length}`;

      if (this.modalCurrent) {
        this.modalCurrent.textContent = (this.currentIndex + 1).toString();
      }
    }

    private showPreviousImage() {
      if (this.images.length <= 1) return;
      this.currentIndex =
        this.currentIndex > 0 ? this.currentIndex - 1 : this.images.length - 1;
      this.showCurrentImage();
    }

    private showNextImage() {
      if (this.images.length <= 1) return;
      this.currentIndex =
        this.currentIndex < this.images.length - 1 ? this.currentIndex + 1 : 0;
      this.showCurrentImage();
    }

    private closeModal() {
      this.modal.classList.add("hidden");
      document.body.style.overflow = "";
      this.modalImage.src = "";
      this.hideLoading();
      this.modalImage.style.opacity = "0";
    }
  }

  // Initialize modal when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    const modalInstance = new ImageModal("imageModal");
    (window as any).imageModal = modalInstance;
  });
</script>

<style>
  .image-modal {
    backdrop-filter: blur(4px);
  }

  .modal-image {
    transition: opacity 0.3s ease-in-out;
  }

  .modal-loading {
    display: none;
  }

  /* Prevent body scroll when modal is open */
  body.modal-open {
    overflow: hidden;
  }

  /* Smooth transitions */
  .image-modal * {
    transition: all 0.2s ease-in-out;
  }

  /* Accessibility improvements */
  .modal-close:focus,
  .modal-prev:focus,
  .modal-next:focus {
    outline: 2px solid white;
    outline-offset: 2px;
  }

  /* Loading spinner animation */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>
