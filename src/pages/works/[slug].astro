---
import "@styles/general.css";
import Layout from "@layouts/Layout.astro";
import SectionContainer from "@components/SectionContainer.astro";
import PageBanner from "@components/PageBanner.astro";
import WorkImageSlider from "@components/WorkImageSlider.vue";
import ImageModal from "@components/ImageModal.astro";
import ContactBanner from "@components/Hero/ContactBanner.astro";
import { WORKS } from "@data/works";

// Helper function to process image URLs
function processImageUrl(imageUrl: string): string {
  if (!imageUrl) return "";

  if (imageUrl.startsWith("@assets/")) {
    return imageUrl.replace("@assets/", "/");
  }

  if (imageUrl.startsWith("@")) {
    return imageUrl.substring(1);
  }

  if (imageUrl.startsWith("/") || imageUrl.startsWith("http")) {
    return imageUrl;
  }

  return "/" + imageUrl;
}

// Generate static paths for all works
export async function getStaticPaths() {
  // Get all works from all categories and collections
  const allWorks = WORKS.flatMap((category) =>
    category.works
      ? category.works.map((work) => ({
          params: { slug: work.slug },
          props: {
            work: work,
            categorySlug: category.slug,
            categoryTitle: category.title
          },
        }))
      : category.collections
        ? category.collections.flatMap((collection) =>
            collection.works.map((work) => ({
              params: { slug: work.slug },
              props: {
                work: work,
                categorySlug: category.slug,
                categoryTitle: category.title,
                collectionSlug: collection.slug,
                collectionTitle: collection.title
              },
            })),
          )
        : [],
  );

  return allWorks;
}

// Get the props passed from getStaticPaths
const { work, categorySlug, categoryTitle, collectionSlug, collectionTitle } = Astro.props as {
  work: any;
  categorySlug: string;
  categoryTitle: string;
  collectionSlug?: string;
  collectionTitle?: string;
};

// Validate that work exists
if (!work) {
  throw new Error(`Work not found for slug: ${Astro.params.slug}`);
}

// Get all works for related works section
const allWorks = WORKS.flatMap((category) =>
  category.works
    ? category.works.map((w) => ({
        ...w,
        categorySlug: category.slug,
        categoryTitle: category.title,
      }))
    : category.collections
      ? category.collections.flatMap((collection) =>
          collection.works.map((w) => ({
            ...w,
            categorySlug: category.slug,
            categoryTitle: category.title,
            collectionSlug: collection.slug,
            collectionTitle: collection.title,
          })),
        )
      : [],
);

// Get related works (prioritize same collection, then same category)
let relatedWorks: any[] = [];

// First, try to get works from the same collection if it exists
if (collectionSlug) {
  relatedWorks = allWorks
    .filter((w) => w.slug !== work.slug && (w as any).collectionSlug === collectionSlug)
    .slice(0, 6);
}

// If we don't have enough works from the collection (or no collection),
// fill with works from the same category
if (relatedWorks.length < 6) {
  const categoryWorks = allWorks
    .filter((w) =>
      w.slug !== work.slug &&
      w.categorySlug === categorySlug &&
      !relatedWorks.some((rw: any) => rw.slug === w.slug) // Avoid duplicates
    )
    .slice(0, 6 - relatedWorks.length);

  relatedWorks = [...relatedWorks, ...categoryWorks];
}

// Get the first image for the banner background
const bannerBackgroundImage = work?.imageUrls && work.imageUrls.length > 0
  ? processImageUrl(work.imageUrls[0])
  : null;

// Process all image URLs for the modal
const processedImageUrls = work?.imageUrls ? work.imageUrls.map((url: string) => processImageUrl(url)) : [];

// SEO metadata
const pageTitle = `${work?.title || 'Work'} by Fernando Feijoo`;
const pageDescription = work?.description || `${work?.title} - ${work?.medium || 'Artwork'} by Fernando Feijoo. ${collectionTitle ? `Part of ${collectionTitle} collection.` : ''}`;
---

<Layout title={pageTitle}>
  <SectionContainer id="work-detail">
    <main>
      <PageBanner
        title={work?.title || 'Work Not Found'}
        backgroundImage={bannerBackgroundImage}
      />

      {work ? (
        <section class="py-12">
          <div class="container mx-auto px-4">
            <!-- Breadcrumb -->
            <nav class="flex items-center space-x-2 text-sm text-gray-500 mb-8" aria-label="Breadcrumb">
              <a href="/" class="hover:text-gray-700 transition-colors">Home</a>
              <span>/</span>
              <a href="/works" class="hover:text-gray-700 transition-colors">Works</a>
              <span>/</span>
              {collectionTitle ? (
                <>
                  <a href={`/works/${categorySlug}`} class="hover:text-gray-700 transition-colors">{categoryTitle}</a>
                  <span>/</span>
                  <a href={`/works/${categorySlug}/${collectionSlug}`} class="hover:text-gray-700 transition-colors">{collectionTitle}</a>
                  <span>/</span>
                </>
              ) : (
                <>
                  <a href={`/works/${categorySlug}`} class="hover:text-gray-700 transition-colors">{categoryTitle}</a>
                  <span>/</span>
                </>
              )}
              <span class="text-gray-900">{work.title}</span>
            </nav>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 mt-16">
              <!-- Main Image Section -->
              <div class="space-y-4">
                <WorkImageSlider
                  imageUrls={work.imageUrls || []}
                  title={work.title}
                  autoplay={false}
                  showControls={work.imageUrls && work.imageUrls.length > 1}
                  client:load
                />
              </div>

              <!-- Information Section -->
              <div class="space-y-6">
                <header>
                  <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
                    {work.title}
                  </h1>
                  <p class="text-lg text-gray-600 mb-4">
                    {categoryTitle}{collectionTitle && ` • ${collectionTitle}`}
                  </p>
                </header>

                <div class="prose max-w-none">
                  {work.description && work.description.trim() !== "" && (
                    <div class="mb-6">
                      <h2 class="text-xl font-semibold mb-3 text-gray-900">Description</h2>
                      <p class="text-gray-700 leading-relaxed">{work.description}</p>
                    </div>
                  )}

                  <div class="space-y-4">
                    <div>
                      <h3 class="text-sm font-medium text-gray-500 uppercase tracking-wider">Medium</h3>
                      <p class="mt-1 text-gray-900">{work.medium || `Mixed media`}</p>
                    </div>

                    {work.dimensions && (
                      <div>
                        <h3 class="text-sm font-medium text-gray-500 uppercase tracking-wider">Dimensions</h3>
                        <p class="mt-1 text-gray-900">{work.dimensions}</p>
                      </div>
                    )}

                    {work.edition && (
                      <div>
                        <h3 class="text-sm font-medium text-gray-500 uppercase tracking-wider">Edition</h3>
                        <p class="mt-1 text-gray-900">{work.edition}</p>
                      </div>
                    )}

                    {work.price && (
                      <div>
                        <h3 class="text-sm font-medium text-gray-500 uppercase tracking-wider">Price</h3>
                        <p class="mt-1 text-gray-900">{work.price}</p>
                      </div>
                    )}
                  </div>
                </div>

                <!-- Contact Button -->
                <div class="pt-6">
                  <a
                    href="/contact"
                    class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium text-white bg-gray-900 hover:bg-gray-800 transition-colors duration-200"
                  >
                    Inquire About This Work
                  </a>
                </div>
              </div>
            </div>

            <!-- Full Width Image Gallery -->
            {work.imageUrls && work.imageUrls.length > 0 && (
              <div class="mt-16 border-t border-gray-200 pt-12">
                <h2 class="text-2xl font-bold text-gray-900 mb-8 text-center">
                  {work.imageUrls.length === 1 ? 'Artwork' : 'Gallery'}
                </h2>

                <!-- Full width gallery container -->
                <div class="w-full overflow-hidden">
                  <div class={`grid gap-1 md:gap-2 w-full max-w-7xl mx-auto ${
                    work.imageUrls.length === 1 ? 'grid-cols-1 justify-center max-w-2xl' :
                    work.imageUrls.length === 2 ? 'grid-cols-2' :
                    work.imageUrls.length === 3 ? 'grid-cols-3' :
                    'grid-cols-3'
                  }`}>
                    {work.imageUrls.map((imageUrl: string, index: number) => {
                      const processedUrl = processImageUrl(imageUrl);
                      return (
                        <button
                          key={index}
                          class="gallery-image group relative overflow-hidden bg-gray-200 hover:opacity-90 transition-all cursor-pointer aspect-square"
                          onclick={`openImageModal(${JSON.stringify(processedImageUrls)}, ${index})`}
                          aria-label={`Open image ${index + 1} in gallery`}
                          type="button"
                        >
                          <img
                            src={processedUrl}
                            alt={`${work.title} - Image ${index + 1}`}
                            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                            loading="lazy"
                            decoding="async"
                          />

                          <!-- Hover overlay -->
                          <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-opacity duration-300 flex items-center justify-center">
                            <div class="text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                              <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
                              </svg>
                            </div>
                          </div>
                        </button>
                      );
                    })}
                  </div>
                </div>
              </div>
            )}

            <!-- Related Works -->
            {relatedWorks.length > 0 && (
              <div class="mt-16 border-t border-gray-200 pt-12">
                <h2 class="text-2xl font-bold text-gray-900 mb-8 text-center">
                  {collectionTitle ? `More from ${collectionTitle}` : `More ${categoryTitle}`}
                </h2>
                <div class="grid grid-cols-3 gap-1 md:gap-2 w-full max-w-7xl mx-auto">
                  {relatedWorks.map((relatedWork: any, index: number) => {
                    if (!relatedWork || !relatedWork.slug) return null;

                    const workImageUrls = relatedWork.imageUrls || [];
                    const hasImages = workImageUrls.length > 0;
                    const firstImageUrl = hasImages ? processImageUrl(workImageUrls[0]) : "";

                    return (
                      <a key={index} href={`/works/${relatedWork.slug}`} class="group block relative bg-white transition-transform duration-300 hover:scale-[1.02]">
                        <div class="aspect-square relative overflow-hidden bg-gray-100">
                          {hasImages && firstImageUrl ? (
                            <img
                              src={firstImageUrl}
                              alt={relatedWork.title || 'Related work'}
                              class="w-full h-full object-cover group-hover:opacity-90 transition-opacity"
                              loading="lazy"
                              decoding="async"
                            />
                          ) : (
                            <div class="w-full h-full flex items-center justify-center bg-gray-50">
                              <div class="text-center p-4">
                                <div class="text-gray-400 text-2xl mb-2">🖼️</div>
                                <h3 class="text-xs font-medium text-gray-600 line-clamp-2">
                                  {relatedWork.title || 'Untitled'}
                                </h3>
                              </div>
                            </div>
                          )}

                          <!-- Hover overlay -->
                          <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center">
                            <div class="text-white text-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                              <h3 class="text-sm md:text-lg font-medium mb-1">{relatedWork.title || 'Untitled'}</h3>
                              <p class="text-xs opacity-80">View Details</p>
                            </div>
                          </div>
                        </div>
                      </a>
                    );
                  })}
                </div>
              </div>
            )}
          </div>
        </section>
      ) : (
        <section class="py-12">
          <div class="container mx-auto px-4 text-center">
            <div class="max-w-md mx-auto">
              <div class="text-6xl mb-4">🖼️</div>
              <h1 class="text-2xl font-bold text-gray-900 mb-4">Work Not Found</h1>
              <p class="text-gray-600 mb-6">
                The work you're looking for doesn't exist or has been moved.
              </p>
              <a
                href="/works"
                class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium text-white bg-gray-900 hover:bg-gray-800 transition-colors duration-200"
              >
                View All Works
              </a>
            </div>
          </div>
        </section>
      )}

      <!-- Contact Banner -->
      <ContactBanner />
    </main>
  </SectionContainer>

  <!-- Image Modal -->
  <ImageModal id="imageModal" />

  <!-- Modal Script -->
  <script>
    // Global function to open image modal
    window.openImageModal = function(images, startIndex = 0) {
      if (window.imageModal && typeof window.imageModal.openModal === 'function') {
        window.imageModal.openModal(images, startIndex);
      } else {
        // Fallback: wait for modal to be initialized
        setTimeout(() => {
          if (window.imageModal && typeof window.imageModal.openModal === 'function') {
            window.imageModal.openModal(images, startIndex);
          }
        }, 100);
      }
    };

    // Ensure modal is properly initialized
    document.addEventListener('DOMContentLoaded', function() {
      // Small delay to ensure all components are loaded
      setTimeout(() => {
        if (!window.imageModal) {
          console.warn('Image modal not initialized');
        }
      }, 500);
    });

    // Handle Astro page transitions
    document.addEventListener('astro:page-load', function() {
      // Reinitialize modal after page transitions
      setTimeout(() => {
        if (window.imageModal) {
          console.log('Image modal ready after page transition');
        }
      }, 100);
    });
  </script>
</Layout>

<style>
  .container {
    max-width: 1200px;
  }

  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Gallery specific styles */
  .gallery-image {
    background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
    overflow: hidden;
  }

  .gallery-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* Ensure consistent aspect ratios */
  .aspect-square {
    aspect-ratio: 1 / 1;
  }

  /* Responsive grid adjustments */
  @media (max-width: 480px) {
    .grid {
      gap: 1px;
    }
  }

  @media (min-width: 481px) and (max-width: 768px) {
    .grid {
      gap: 0.125rem; /* 2px */
    }
  }

  @media (min-width: 769px) {
    .grid {
      gap: 0.5rem; /* 8px */
    }
  }

  /* Smooth transitions */
  .transition-transform {
    transition-property: transform;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }

  .transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }

  .transition-colors {
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 200ms;
  }

  .transition-opacity {
    transition-property: opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }

  /* Hover effects */
  .hover\:scale-\[1\.02\]:hover {
    --tw-scale-x: 1.02;
    --tw-scale-y: 1.02;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  }

  .group:hover .group-hover\:scale-105 {
    --tw-scale-x: 1.05;
    --tw-scale-y: 1.05;
    transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  }

  /* Remove any unwanted borders or shadows */
  .grid > * {
    border: none;
    box-shadow: none;
  }

  /* Ensure full width utilization */
  .max-w-7xl {
    max-width: 1280px;
  }

  /* Performance optimization */
  .group {
    will-change: transform;
  }

  .group img {
    will-change: transform;
  }

  /* Loading states */
  .gallery-image img:not([src]) {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 2s infinite;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    *, *::before, *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* Focus styles for keyboard navigation */
  .gallery-image:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .gallery-image {
      border: 1px solid #000;
    }
  }
</style>
