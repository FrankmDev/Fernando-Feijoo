---
import "@styles/general.css";
import Layout from "@layouts/Layout.astro";
import SectionContainer from "@components/SectionContainer.astro";
import PageBanner from "@components/PageBanner.astro";
import WorkImageSlider from "@components/WorkImageSlider.vue";
import { WORKS } from "@data/works";
import { getFirstImageUrl } from "@utils/imageUtils";

// Generate static paths for all works
export async function getStaticPaths() {
  // Get all works from all categories and collections
  const allWorks = WORKS.flatMap((category) =>
    category.works
      ? category.works.map((work) => ({
          params: { slug: work.slug },
          props: {
            work: work,
            categorySlug: category.slug,
            categoryTitle: category.title
          },
        }))
      : category.collections
        ? category.collections.flatMap((collection) =>
            collection.works.map((work) => ({
              params: { slug: work.slug },
              props: {
                work: work,
                categorySlug: category.slug,
                categoryTitle: category.title,
                collectionSlug: collection.slug,
                collectionTitle: collection.title
              },
            })),
          )
        : [],
  );

  return allWorks;
}

// Get the props passed from getStaticPaths
const { work, categorySlug, categoryTitle, collectionSlug, collectionTitle } = Astro.props as {
  work: any;
  categorySlug: string;
  categoryTitle: string;
  collectionSlug?: string;
  collectionTitle?: string;
};

// Validate that work exists
if (!work) {
  throw new Error(`Work not found for slug: ${Astro.params.slug}`);
}

// Get all works for related works section
const allWorks = WORKS.flatMap((category) =>
  category.works
    ? category.works.map((w) => ({
        ...w,
        categorySlug: category.slug,
        categoryTitle: category.title,
      }))
    : category.collections
      ? category.collections.flatMap((collection) =>
          collection.works.map((w) => ({
            ...w,
            categorySlug: category.slug,
            categoryTitle: category.title,
            collectionSlug: collection.slug,
            collectionTitle: collection.title,
          })),
        )
      : [],
);

// Get related works (same category, different work)
const relatedWorks = allWorks
  .filter((w) => w.slug !== work.slug && w.categorySlug === categorySlug)
  .slice(0, 4);

/*
TODO: Future logic for when image URLs are properly set up:

// Function to convert @assets paths to actual image imports
const getImageSrc = (imageUrl: string) => {
  if (imageUrl.startsWith('@assets/')) {
    // Here you would dynamically import the image
    // return import(imageUrl.replace('@assets/', '../assets/'));
    return imageUrl.replace('@assets/', '/src/assets/');
  }
  return imageUrl;
};

// Use this in the template:
// <img src={getImageSrc(work.imageUrls[0])} alt={work.title} />
*/
---

<Layout title={`${work?.title || 'Work'} - Fernando Feijoo`}>
  <SectionContainer id="work-detail">
    <main>
      <PageBanner title={work?.title || 'Work Not Found'} />

      {work ? (
        <section class="py-12">
          <div class="container mx-auto px-4">
            <!-- Breadcrumb -->
            <nav class="flex items-center space-x-2 text-sm text-gray-500 mb-8">
              <a href="/" class="hover:text-gray-700">Home</a>
              <span>/</span>
              <a href="/#works" class="hover:text-gray-700">Works</a>
              <span>/</span>
              <a href={`/#${categorySlug}`} class="hover:text-gray-700">{categoryTitle}</a>
              {collectionTitle && (
                <>
                  <span>/</span>
                  <span class="text-gray-600">{collectionTitle}</span>
                </>
              )}
              <span>/</span>
              <span class="text-gray-900">{work.title}</span>
            </nav>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
            <!-- Main Image Section -->
            <div class="space-y-4">
              <WorkImageSlider
                imageUrls={work.imageUrls || []}
                title={work.title}
                autoplay={false}
                showControls={work.imageUrls && work.imageUrls.length > 1}
                client:load
              />
            </div>

            <!-- Information Section -->
            <div class="space-y-6">
              <div>
                <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
                  {work.title}
                </h1>
                <p class="text-lg text-gray-600 mb-4">
                  {categoryTitle}{collectionTitle && ` ‚Ä¢ ${collectionTitle}`}
                </p>
              </div>

              <div class="prose max-w-none">
                {work.description && work.description.trim() !== "" && (
                  <div class="mb-6">
                    <h2 class="text-xl font-semibold mb-3 text-gray-900">Description</h2>
                    <p class="text-gray-700 leading-relaxed">{work.description}</p>
                  </div>
                )}

                <div class="space-y-4">
                  <div>
                    <h3 class="text-sm font-medium text-gray-500 uppercase tracking-wider">Medium</h3>
                    <p class="mt-1 text-gray-900">{work.medium || "Mixed media"}</p>
                  </div>

                  {work.dimensions && (
                    <div>
                      <h3 class="text-sm font-medium text-gray-500 uppercase tracking-wider">Dimensions</h3>
                      <p class="mt-1 text-gray-900">{work.dimensions}</p>
                    </div>
                  )}

                  {work.edition && (
                    <div>
                      <h3 class="text-sm font-medium text-gray-500 uppercase tracking-wider">Edition</h3>
                      <p class="mt-1 text-gray-900">{work.edition}</p>
                    </div>
                  )}

                  {work.price && (
                    <div>
                      <h3 class="text-sm font-medium text-gray-500 uppercase tracking-wider">Price</h3>
                      <p class="mt-1 text-gray-900">{work.price}</p>
                    </div>
                  )}

                  <!-- Debug information - remove in production -->
                  <div class="mt-8 p-4 bg-gray-50 rounded-lg">
                    <h3 class="text-sm font-medium text-gray-500 uppercase tracking-wider mb-2">Debug Info</h3>
                    <div class="text-xs text-gray-600 space-y-1">
                      <p><strong>Slug:</strong> {work.slug}</p>
                      <p><strong>Category:</strong> {categorySlug} ({categoryTitle})</p>
                      {collectionSlug && <p><strong>Collection:</strong> {collectionSlug} ({collectionTitle})</p>}
                      <p><strong>Has Images:</strong> {work.imageUrls ? work.imageUrls.length : 0} images</p>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Contact Button -->
              <div class="pt-6">
                <a
                  href="/contact"
                  class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-gray-900 hover:bg-gray-800 transition-colors duration-200"
                >
                  Inquire About This Work
                </a>
              </div>
            </div>
          </div>

          <!-- Note: All images are now handled by the WorkImageSlider component above -->

            <!-- Related Works -->
            {relatedWorks.length > 0 && (
              <div class="mt-16 border-t border-gray-200 pt-12">
                <h2 class="text-2xl font-bold text-gray-900 mb-8">
                  More from {categoryTitle}
                </h2>
                <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
                  {relatedWorks.map((relatedWork) => (
                    relatedWork && relatedWork.slug ? (
                      <a href={`/works/${relatedWork.slug}`} class="group block">
                        <div class="aspect-w-1 aspect-h-1 bg-gray-200 rounded-lg overflow-hidden flex items-center justify-center">
                          {relatedWork.imageUrls && relatedWork.imageUrls.length > 0 ? (
                            <img
                              src={getFirstImageUrl(relatedWork.imageUrls)}
                              alt={relatedWork.title || 'Related work'}
                              class="w-full h-48 object-cover group-hover:opacity-90 transition-opacity"
                              loading="lazy"
                              onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                            />
                          ) : null}
                          <!-- Fallback for related works -->
                          <div class="flex items-center justify-center w-full h-48 bg-gray-200 rounded-lg">
                            <div class="text-center">
                              <div class="text-gray-400 text-2xl mb-2">üñºÔ∏è</div>
                              <p class="text-xs text-gray-500">Image coming soon</p>
                            </div>
                          </div>
                        </div>
                        <h3 class="mt-2 text-sm font-medium text-gray-900 group-hover:text-indigo-600">
                          {relatedWork.title || 'Untitled'}
                        </h3>
                      </a>
                    ) : null
                  ))}
                </div>
              </div>
            )}
          </div>
        </section>
      ) : (
        <section class="py-12">
          <div class="container mx-auto px-4 text-center">
            <div class="max-w-md mx-auto">
              <div class="text-6xl mb-4">üñºÔ∏è</div>
              <h1 class="text-2xl font-bold text-gray-900 mb-4">Work Not Found</h1>
              <p class="text-gray-600 mb-6">
                The work you're looking for doesn't exist or has been moved.
              </p>
              <a
                href="/#works"
                class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-gray-900 hover:bg-gray-800 transition-colors duration-200"
              >
                View All Works
              </a>
            </div>
          </div>
        </section>
      )}
    </main>
  </SectionContainer>
</Layout>

<style>
  .aspect-w-1 {
    position: relative;
    width: 100%;
  }
  .aspect-h-1 {
    padding-bottom: 100%;
  }
  .aspect-w-1 > * {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
</style>
